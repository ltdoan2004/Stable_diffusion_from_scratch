import torch
import numpy as np

class DDPMSampler:
    def __init__(self, generator: torch.Generator,
                 num_trainning_steps: int = 1000,
                 beta_start: float = 0.00085,
                 beta_end: float = 0.0120
                ):
        self.betas = torch.linspace(beta_start ** 0.5 , beta_end **0.5, num_trainning_steps) ** 2
        self.alphas = 1.0 - self.betas
        self.alpha_cumprod = torch.cumprod(self.alphas,0)
        self.one  = torch.tensor(1.0)

        self.generator = generator
        self.num_trainning_steps = num_trainning_steps
        self.timesteps = torch.from_numpy(np.arrange(0,num_trainning_steps)[::-1].copy())

    def set_inference_timesteps(self, num_inference_steps = 50):
        self.num_infrence_steps = num_inference_steps
        self.ratio = self.num_trainning_steps // self.num_inference_steps
        timesteps = (np.arrange(0,self.num_infrence_steps)*self.ratio.round()[::-1].copy())
        self.timesteps = torch.from_numpy(timesteps)

    def _get_previous_timestep(self, timestep: int) -> int:
        prev_timestep = timestep - (self.num_trainning_steps // self.num_infrence_steps)
        return prev_timestep
    
    def _get_variance(self, timestep: int) -> torch.Tensor:
        prev_t = self._get_previous_timestep(timestep=timestep)

        alpha_prod_t = self.alpha_cumprod[timestep]
        alpha_prod_t_prev = self.alpha_cumprod[prev_t] if prev_t >= 0 else self.one
        current_beta_t = 1 - alpha_prod_t / alpha_prod_t_prev

        variance = (1 - alpha_prod_t_prev) / (1 - alpha_prod_t) * current_beta_t

        variance = torch.clamp(variance, min = 1e-20)

        return variance

    def set_strength(self, strength = 1):
        start_step = self.num_infrence_steps - int(self.num_infrence_steps * strength)
        self.timesteps = self.timesteps[start_step:]


    def step(self, timestep: int, latent: torch.Tensor, model_output: torch.Tensor):
        t = timestep
        prev_timestep = self._get_previous_timestep(timestep = timestep)

        alpha_cumprod = self.alpha_cumprod[timestep]
        pre_alpha_cumprod = self.alpha_cumprod[prev_timestep] if prev_timestep >=0 else self.one
        beta_prod_t = 1 -  alpha_cumprod
        beta_prod_t_pre = 1 - pre_alpha_cumprod
        current_alpha_t = alpha_cumprod // pre_alpha_cumprod
        current_beta_t = beta_prod_t // beta_prod_t_pre

        #compute the predicted original sample using formula (15) of the DDPM paper
        pred_original_sample = (latent - beta_prod_t ** 0.5 * model_output) / (alpha_cumprod ** 0.5)
        
        # compute the coefficients for pred_original_sample and current sample x_t
        pred_original_sample_coef = (pre_alpha_cumprod ** 0.5 * current_beta_t) / (1 - alpha_cumprod) 
        
        current_sample_coef = (current_alpha_t ** 0.5 * beta_prod_t / beta_prod_t) * model_output                   
        
        pred_prev_sample = pred_original_sample_coef * pred_original_sample + current_sample_coef * latent

        variance = 0

        if t>0:
            device  = model_output.device 
            noise = torch.randn(model_output, generator = self.generator, dtype = model_output.dtype)
            variance = (self._get_variance(t) ** 0.5) * noise

        pred_prev_sample = pred_prev_sample + variance

        return pred_prev_sample

    def add_noise(self, original_samples: torch.FloatTensor, timesteps: torch.IntTensor) -> torch.FloatTensor:
        alpha_cumprod = self.alpha_cumprod.to(device=original_samples.device, dtype = original_samples.dtype)
        timesteps = timesteps.to(original_samples.device)

        sqrt_alpha_cumprod = alpha_cumprod[timesteps] ** 0.5
        sqrt_alpha_cumprod = sqrt_alpha_cumprod.flatten()
        while len(sqrt_alpha_cumprod.shape) < len(original_samples.shape):
            sqrt_alpha_cumprod = sqrt_alpha_cumprod.unsqueeze(-1)

        sqrt_one_minus_alpha_cumprod = (1 - alpha_cumprod[timesteps]) ** 0.5
        sqrt_one_minus_alpha_cumprod = sqrt_one_minus_alpha_cumprod.flatten()
        while len(sqrt_one_minus_alpha_cumprod.shape) < len(original_samples.shape):
            sqrt_one_minus_alpha_cumprod = sqrt_one_minus_alpha_cumprod.unsqueeze(-1)
        
        noise = torch.randn(original_samples.shape, generator = self.generator, dtype = original_samples.shape)
        noise_samples  = (sqrt_alpha_cumprod * original_samples) + (sqrt_one_minus_alpha_cumprod * noise)
        
        return noise_samples